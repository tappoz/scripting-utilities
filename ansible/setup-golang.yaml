---
# ansible-playbook setup-golang.yaml -v  --ask-become-pass --extra-vars "ansible_user=<MYUSERNAME> ansible_ssh_pass=<MYPASSWD>"
# ansible-playbook setup-golang.yaml -v -i MY_HOST_IP_ADDRESS, --extra-vars "ansible_user=<USERNAME>" --key-file "~/.ssh/my_key"

- name: Make sure Go is installed
  hosts: localhost
  become: yes
  vars:
    requested_go_v:  "{{version | default('1.17.1')}}"
    go_installation_path: /usr/local
  tasks:
  - name: Checking the installed Go version
    shell: /usr/local/go/bin/go version | awk '{print $3}' | sed 's/go//'
    register: current_v
    changed_when: false
  - name: Compare the installed version to the requested version
    debug:
      msg: Installed = {{current_v.stdout}}, Requested = {{requested_go_v}}
  # - name: Checks on versions match/mismatch
  #   block:
  #     - name: Check if an upgrade is needed
  #       debug:
  #         msg: "nothing to upgrade, ending play"
  #     - meta: end_play
  #   when: current_v.stdout == requested_go_v
  - name: Cleaun up the old Go installation
    file:
      path: '{{go_installation_path}}/go'
      state: absent
  - name: Download & extract (install) Go
    unarchive:
      src: https://dl.google.com/go/go{{requested_go_v}}.linux-amd64.tar.gz
      dest: '{{go_installation_path}}'
      remote_src: yes
  - name: Make sure GOPATH is there
    file:
      path: "{{item}}"
      owner: '{{ ansible_user }}'
      group: '{{ ansible_user }}'
      state: directory
    with_items:
      - "/home/{{ ansible_user }}/go-path"
      - "/home/{{ ansible_user }}/go-path/src"
      - "/home/{{ ansible_user }}/go-path/pkg"
      - "/home/{{ ansible_user }}/go-path/bin"
  - name: Make sure Go is configured
    blockinfile:
      path: /home/{{ ansible_user }}/.bashrc
      backup: yes
      marker: "# {mark} Golang config"
      block: |
        export GOROOT=/usr/local/go
        export GOPATH=$HOME/go-path
        export PATH=$PATH:/usr/local/go/bin:$GOPATH/bin

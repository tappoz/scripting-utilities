// https://github.com/brianc/node-postgres
const { Client } = require('pg');

let express = require('express');

const HTTP_PORT = 3000;
const app = express();

// https://node-postgres.com/features/queries
const connectionString = 'postgres://postgres:test01@localhost/pentest?sslmode=disable';
const sqlCreateTable = `
DROP TABLE IF EXISTS foo;
CREATE TABLE IF NOT EXISTS foo (
    id       SERIAL PRIMARY KEY,
    category VARCHAR ( 10 ) UNIQUE NOT NULL
);
INSERT INTO foo(id, category) VALUES(1, 'foo-cat');
`;

// function to get a dbClient connected to the DB
const connect = () => {
  const dbClient = new Client({
    connectionString,
  })
  dbClient.connect();
  return dbClient;
}

// get a dbClient instance for the DB
const dbClient = connect();

// safe HTTP route
app.get('/foo-safe', (req, res) => {
  // parse the query param
  // as an integer with validation
  const id = req.query.id;
  if (!id || !Number(id) || Math.floor(id) != Math.ceil(id)) {
    return res.status(400).send(':-(');
  }
  console.log(`===> safe call with ID: '${id}'`);
  // safe db query
  return retError = dbClient.query("SELECT * FROM foo WHERE id = $1", [id], (dbErr, dbRes) => {
    if (dbErr) {
      console.error(`Safe path, dbErr: ${dbErr}`);
      return res.status(500).send(':-(');
    }
    console.log(`Safe DB res:\n${JSON.stringify(dbRes.rows, null, 2)}\n`);
    return res.send(`safe id: ${id}`);
  });
});

// unsafe HTTP route
app.get('/foo-unsafe', (req, res) => {
  // usafe parsing
  const id = req.query.id;
  if (!id || !Number(id) || Math.floor(id) != Math.ceil(id)) {
    console.log(`Who cares! Undexpected ID: '${id}'`);
  }
  console.log(`===> unsafe call with ID: '${id}'`);
  // unsafe db query
  // (issues with both parsing and running SQL)
  return retError = dbClient.query(`SELECT * FROM foo WHERE id = ${id}`, (dbErr, dbRes) => {
    if (dbErr) {
      console.error(`Unsafe path, dbErr: ${dbErr}`);
      return res.status(500).send(':-(');
    }
    console.log(`Unsafe DB res:\n${JSON.stringify(dbRes.rows, null, 2)}\n`);
    return res.send(`unsafe id passed: ${id}`);
  });
});

// run the HTTP server
const server = app.listen(HTTP_PORT, () => {
  dbClient.query(sqlCreateTable, (err, res) => {
    if (err) {
      console.error(`Cannot prepare the DB table: ${err}`);
    }
    console.log(`To prepare the DB table we performed ${res.length} SQL operations`);
  });
  console.log(`Safe/unsafe DB app listening on port ${HTTP_PORT}!`);
});

// function to close the DB connection
const stopApp = () => {
  dbClient.end();
  console.log(`\n\t===> Terminating the app listening on port ${HTTP_PORT}!`);
};

// gracefully shut down the Node.js process
process.on('SIGTERM', () => {
  server.close(() => {
    stopApp();
  });
});

// gracefully shut down the Node.js process
// when the user hits CTRL-C
process.on('SIGINT', () => {
  server.close(() => {
    stopApp();
  });
});
